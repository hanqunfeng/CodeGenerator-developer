<#assign className = table.className>   <#assign classNameFirstLower = className?uncap_first>   <#assign classNameLowerCase = className?lower_case>		<#if table.idColumn.javaType =="java.lang.Integer">		<#assign pkJavaType = "java.lang.Long">		<#else>		<#assign pkJavaType = table.idColumn.javaType>		</#if>package ${namespace}.service.${modulName};import java.util.UUID;import javax.annotation.Resource;import com.querydsl.core.types.dsl.BooleanExpression;import lombok.extern.slf4j.Slf4j;import org.apache.commons.collections4.IteratorUtils;import org.apache.commons.lang3.ArrayUtils;import org.apache.commons.lang3.StringUtils;import org.pyf.developer.utils.page.CP_Page;import org.pyf.developer.utils.page.CP_Sorter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheConfig;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import ${namespace}.bean.${datasourceName}.model.${modulName}.${className};import ${namespace}.bean.${datasourceName}.model.${modulName}.Q${className};import ${namespace}.dao.jpa.${datasourceName}.${modulName}.${className}JpaRepository;/** * Description: <${classNameFirstLower}ServiceImpl>. <br> * <p> * <${classNameFirstLower}service实现类> * </p> * generate time:${.now} *  * @author generator-cp-web * @version V1.0 */@Service(value="${classNameFirstLower}Service")@Slf4j@CacheConfig(cacheNames = "commonCache")@Transactionalpublic class ${className}ServiceImpl implements		I${className}Service {    @Autowired    ${className}JpaRepository ${classNameFirstLower}JpaRepository;		@SuppressWarnings("unchecked")	@Override	public List<${className}> findByPage(CP_Page page, CP_Sorter sorter, ${className} ${classNameFirstLower},String... fields) {		log.info("分页查询${className}列表begin");		log.info("${className}ServiceImpl findByPage begin");        page.setPageSize(25);        //排序        Sort sort = new Sort(sorter.getSortType().equals(CP_Sorter.DESC) ? Sort.Direction.DESC : Sort.Direction.ASC, sorter.getSortName());        //分页        Pageable pageable = PageRequest.of(page.getIndex(), page.getPageSize(), sort);        Q${className} q${className} = Q${className}.${classNameFirstLower};        List<BooleanExpression> predicateList = new ArrayList<>();        <#if pkJavaType =="java.lang.Long">        if(${classNameFirstLower}.getId()!=null)            predicateList.add(q${className}.id.eq(${classNameFirstLower}.getId() ));        </#if>        <#if pkJavaType =="java.lang.String">        if(StringUtils.hasText(${classNameFirstLower}.getId()))            predicateList.add(q${className}.id.eq(${classNameFirstLower}.getId() ));        </#if>        Page<${className}> resultPage = ${classNameFirstLower}JpaRepository.findAll(predicateList, pageable);        page.setTotal(resultPage.getTotalElements());        //如有需要，可以转成list        List<${className}> results = IteratorUtils.toList(resultPage.iterator());		log.info("分页查询${className}列表end");		log.info("${className}ServiceImpl findByPage end");		return results;	}	@Override	public ${className} update(${className} ${classNameFirstLower}){		log.info("${className}ServiceImpl update begin");        ${classNameFirstLower}JpaRepository.save(${classNameFirstLower});		log.info("${className}ServiceImpl update end");	return ${classNameFirstLower};	}	@Override	public ${className} add(${className} ${classNameFirstLower}){		log.info("${className}ServiceImpl add begin");        <#if pkJavaType =="java.lang.Long">		${classNameFirstLower}.setId(UUID.randomUUID().toString());        </#if>        ${classNameFirstLower}JpaRepository.save(${classNameFirstLower});		log.info("${className}ServiceImpl add begin");		return ${classNameFirstLower};	}	@Override	public ${className} findById(${pkJavaType} id ,String... fields) {		log.info("${className}ServiceImpl findById begin");        ${className} ${classNameFirstLower} = ${classNameFirstLower}JpaRepository.findById(Long.valueOf(id)).get()		log.info("${className}ServiceImpl findById end");		return ${classNameFirstLower};	}	@Override	public void delete(${pkJavaType}... ids) {		log.info("${className}ServiceImpl delete begin");		if (ArrayUtils.isEmpty(ids))			return;        Q${className} q${className} = Q${className}.${classNameFirstLower};        //封装查询条件        BooleanExpression booleanExpression = q${className}.id.in(ids);        Iterator<${className}> iterator = ${classNameFirstLower}JpaRepository.findAll(booleanExpression).iterator();        //如有需要，可以转成list        List<${className}> results = IteratorUtils.toList(iterator);        // 删除记录        ${classNameFirstLower}JpaRepository.deleteAll(results);		log.info("${className}ServiceImpl delete end");	}}